package ma.sofisoft.services.utilityServices;

import io.quarkus.security.identity.SecurityIdentity;
import jakarta.annotation.Priority;
import jakarta.inject.Inject;
import jakarta.interceptor.AroundInvoke;
import jakarta.interceptor.Interceptor;
import jakarta.interceptor.InvocationContext;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import lombok.extern.slf4j.Slf4j;
import ma.sofisoft.PermissionProvider;
import ma.sofisoft.RequiredPermission;
import ma.sofisoft.Secured;
import ma.sofisoft.LogicalOperator;
import ma.sofisoft.exceptions.permissions.PermissionDeniedException;

import java.lang.reflect.Method;
import java.util.*;
import java.util.stream.Collectors;

/**
 * üõ°Ô∏è INTERCEPTOR DE S√âCURIT√â - VERSION CORRIG√âE
 *
 * R√îLE PRINCIPAL:
 * Cet interceptor s'ex√©cute AVANT chaque m√©thode annot√©e avec @Secured
 * Il v√©rifie si l'utilisateur a le droit d'acc√©der √† cette m√©thode
 *
 * NOUVELLE LOGIQUE:
 * 1. OR entre groupes : Si l'utilisateur "passe" AU MOINS UN groupe ‚Üí Acc√®s autoris√©
 * 2. Operator vient de l'annotation : AND/OR s'applique entre permissions d'un m√™me groupe
 *
 * EXEMPLE:
 * @RequiredPermission(groups = {"show_user", "admin_user"}, operator = LogicalOperator.OR)
 * ‚Üí Si user satisfait "show_user" avec operator OR ‚Üí ‚úÖ OK
 * ‚Üí Sinon, si user satisfait "admin_user" avec operator OR ‚Üí ‚úÖ OK
 * ‚Üí Sinon ‚Üí ‚ùå Refus√©
 */
@Slf4j
@Interceptor
@Secured  // Cet interceptor s'applique aux classes/m√©thodes annot√©es @Secured
@Priority(Interceptor.Priority.APPLICATION)  // Priorit√© d'ex√©cution
public class RequiredPermissionInterceptor {

    // Informations sur l'utilisateur connect√© (inject√© par Quarkus)
    @Inject
    SecurityIdentity identity;

    // Service pour lire les permissions du JWT (notre SofiPermissionProvider)
    @Inject
    PermissionProvider permissionProvider;

    /**
     * üéØ M√âTHODE PRINCIPALE: S'ex√©cute AVANT chaque m√©thode @Secured
     *
     * WORKFLOW:
     * 1. R√©cup√©rer l'annotation @RequiredPermission (si elle existe)
     * 2. V√©rifier si l'utilisateur est connect√©
     * 3. V√©rifier si l'utilisateur a les droits requis
     * 4. Si OK ‚Üí continuer, sinon ‚Üí bloquer avec erreur HTTP
     */
    @AroundInvoke
    public Object checkPermission(InvocationContext ctx) throws Exception {
        // √âTAPE 1: R√©cup√©rer des infos sur la m√©thode appel√©e
        Method method = ctx.getMethod();  // Quelle m√©thode est appel√©e ?

        // √âTAPE 2: Chercher si cette m√©thode a une annotation @RequiredPermission
        RequiredPermission annotation = getAnnotation(method, ctx.getTarget().getClass());

        // √âTAPE 3: Si pas d'annotation ‚Üí pas de restrictions ‚Üí acc√®s libre
        if (annotation == null) {
            log.debug("[Interceptor] Aucune annotation @RequiredPermission trouv√©e, acc√®s autoris√©.");
            return ctx.proceed();  // Continuer l'ex√©cution normale de la m√©thode
        }

        // √âTAPE 4: V√©rifier si l'utilisateur est connect√© (authentifi√©)
        if (identity.isAnonymous()) {
            log.warn("[Interceptor] Utilisateur anonyme. Acc√®s refus√©.");
            // Retourner HTTP 401 Unauthorized
            throw new WebApplicationException("Authentication required", Response.Status.UNAUTHORIZED);
        }

        // √âTAPE 5: V√©rifier les permissions (la logique principale)
        boolean hasAccess = checkAccess(annotation);

        // √âTAPE 6: D√©cision finale
        if (!hasAccess) {
            // Acc√®s refus√© ‚Üí Utiliser votre exception personnalis√©e
            String requiredGroups = Arrays.toString(annotation.groups());
            String errorMessage = String.format("Groupes requis: %s avec operator: %s",
                    requiredGroups, annotation.operator());

            log.error("[Interceptor] Acc√®s refus√©. {}", errorMessage);

            // ‚ûï UTILISATION DE VOTRE EXCEPTION PERSONNALIS√âE
            throw new PermissionDeniedException(errorMessage);
        }

        // √âTAPE 7: Acc√®s autoris√© ‚Üí Continuer l'ex√©cution
        log.info("[Interceptor] ‚úÖ Acc√®s autoris√©");
        return ctx.proceed();  // Ex√©cuter la m√©thode originale
    }

    /**
     * üß† LOGIQUE PRINCIPALE CORRIG√âE: Impl√©mente la nouvelle logique
     *
     * NOUVELLE LOGIQUE:
     * - OR entre groupes (si au moins un groupe "passe" ‚Üí acc√®s OK)
     * - L'operator vient de l'annotation et s'applique √† TOUS les groupes
     *
     * EXEMPLE:
     * @RequiredPermission(groups = {"show_user", "admin_user"}, operator = LogicalOperator.OR)
     *
     * Pour chaque groupe ("show_user", puis "admin_user"):
     * 1. L'user satisfait-il ce groupe avec l'operator OR ?
     * Si OUI pour au moins un groupe ‚Üí Acc√®s autoris√©
     */
    private boolean checkAccess(RequiredPermission annotation) {
        // DONN√âES DE L'ANNOTATION
        String[] requiredGroups = annotation.groups();  // Ex: ["show_user", "admin_user"]
        LogicalOperator operator = annotation.operator();  // Ex: AND ou OR

        // √âTAPE 1: NORMALISER les groupes requis
        // Pourquoi ? Car "Show_User" ‚â† "show_user" en informatique
        // On transforme tout en minuscules et on supprime les espaces
        List<String> normalizedRequiredGroups = Arrays.stream(requiredGroups)
                .map(g -> g != null ? g.trim().toLowerCase(Locale.ROOT) : null)  // "Show_User " ‚Üí "show_user"
                .filter(g -> g != null && !g.isEmpty())  // Supprimer les valeurs nulles/vides
                .collect(Collectors.toList());

        // CAS PARTICULIER: Aucun groupe requis = acc√®s libre
        if (normalizedRequiredGroups.isEmpty()) {
            log.debug("[Interceptor] Aucun groupe requis, acc√®s autoris√©");
            return true;
        }

        // √âTAPE 2: LOGS DE DEBUG pour voir ce qu'on va v√©rifier
        log.debug("[Interceptor] üîç V√©rification acc√®s:");
        log.debug("[Interceptor]   - Groupes requis: {}", normalizedRequiredGroups);
        log.debug("[Interceptor]   - Op√©rateur pour TOUS les groupes: {}", operator);

        // √âTAPE 3: BOUCLE SUR CHAQUE GROUPE REQUIS
        // Logique OR entre groupes : si AU MOINS UN groupe "passe" ‚Üí succ√®s
        for (String requiredGroup : normalizedRequiredGroups) {
            log.debug("[Interceptor] üîç Test du groupe: '{}'", requiredGroup);

            // NOUVELLE LOGIQUE: Utiliser la m√©thode corrig√©e du PermissionProvider
            // Cette m√©thode fait TOUT le travail :
            // 1. V√©rifie si le groupe existe
            // 2. R√©cup√®re les permissions du groupe
            // 3. Applique l'operator
            // 4. Retourne true/false
            boolean groupPassed = permissionProvider.satisfiesPermissionGroupWithOperator(
                    requiredGroup,
                    operator
            );

            // LOGS DE DEBUG
            if (groupPassed) {
                log.info("[Interceptor] ‚úÖ Acc√®s autoris√© via groupe '{}' avec operator {}",
                        requiredGroup, operator);
                return true; // OR entre groupes : un seul groupe qui passe suffit !
            } else {
                log.debug("[Interceptor] ‚ùå Groupe '{}' √©choue avec operator {}",
                        requiredGroup, operator);
                // Continue la boucle pour essayer le groupe suivant
            }
        }

        // √âTAPE 4: Si on arrive ici, AUCUN groupe n'a donn√© acc√®s
        log.warn("[Interceptor] ‚ùå Aucun des groupes requis ne donne acc√®s");
        return false; // Acc√®s refus√©
    }

    /**
     * üîç M√âTHODE HELPER: R√©cup√®re l'annotation @RequiredPermission
     *
     * LOGIQUE:
     * 1. D'abord chercher sur la m√©thode (priorit√©)
     * 2. Sinon chercher sur la classe
     * 3. Sinon retourner null (pas d'annotation)
     *
     * EXEMPLE:
     * @RequiredPermission(groups = {"show_user"}, operator = LogicalOperator.OR)  // ‚Üê sur la classe
     * public class TestController {
     *
     *     @RequiredPermission(groups = {"admin_user"}, operator = LogicalOperator.AND)  // ‚Üê sur la m√©thode (priorit√©)
     *     public void method1() { ... }
     *
     *     public void method2() { ... }                 // ‚Üê h√©rite de la classe
     * }
     */
    private RequiredPermission getAnnotation(Method method, Class<?> clazz) {
        // PRIORIT√â 1: Annotation sur la m√©thode
        if (method.isAnnotationPresent(RequiredPermission.class)) {
            RequiredPermission annotation = method.getAnnotation(RequiredPermission.class);
            log.debug("[Interceptor] üéØ Annotation trouv√©e sur la m√©thode: {} - groups: {}, operator: {}",
                    method.getName(), Arrays.toString(annotation.groups()), annotation.operator());
            return annotation;
        }
        // PRIORIT√â 2: Annotation sur la classe
        else if (clazz.isAnnotationPresent(RequiredPermission.class)) {
            RequiredPermission annotation = clazz.getAnnotation(RequiredPermission.class);
            log.debug("[Interceptor] üéØ Annotation trouv√©e sur la classe: {} - groups: {}, operator: {}",
                    clazz.getSimpleName(), Arrays.toString(annotation.groups()), annotation.operator());
            return annotation;
        }

        // Aucune annotation trouv√©e
        log.debug("[Interceptor] üéØ Aucune annotation @RequiredPermission trouv√©e");
        return null;
    }
}